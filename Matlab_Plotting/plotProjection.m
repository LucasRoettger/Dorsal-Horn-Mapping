%% Script to project the coordinates generated by the ReferenceFrameToolkit.ijm onto the reference outline
% By Lucas RÃ¶ttger, 20.12.2024
% Email: l.roettger@uke.de

% Prerequisites:    1. A folder ROIOUTLINES (provided)
%                   Contained in your input folder:
%                   2. An excel file with the cell coordinates in the same
%                   image names and groups whichs name starts with "Coordinates"

% //////////////////////////////////////////////////////////////////////////// %
clear, clc

addpath("Matlab_subroutines\", "ROIOUTLINES\");
% Variables 
concatFigures = true;
plotExcluded = true;

%% Get input file
inputDir = uigetdir("Examples\", "Select transformation folder"); %change "Examples\" into whatever file suits you best
d = dir(inputDir);
fns = {d.name};
coordfiles = find(cellfun(@(x) contains(upper(x), "COORDINATES"), fns));
tempTable = {};
for i = 1:length(coordfiles)
    coordinatePath = fullfile(inputDir, fns{coordfiles(i)});
    tempTable = vertcat(tempTable, readcell(coordinatePath, "Sheet","Cell_Data", "NumHeaderLines", 1));
end
coordinateTable = cell2table(tempTable(:,1:8), "VariableNames",{'Label', 'X', 'Y', 'Group', 'tX', 'tY', 'Lamina', 'Segment'});


%% Extract data
coordinatesPerImage = struct();
fileNames = cellfun(@(x) extractBefore(x, '.tif'), unique(coordinateTable.Label), 'UniformOutput', false);
for i = 1:length(fileNames)
    fileName = fileNames{i};
    if contains(fileName, '.') || contains(fileName, '-') 
        [fileName, coordinateTable] = cleanUpFilename(fileName, coordinateTable);
    end
    
    imgData = coordinateTable(startsWith(coordinateTable.Label, fileName), :);
    

    coordinatesPerImage.(fileName) = imgData;
end

%% Plot cells onto outlines
fields = fieldnames(coordinatesPerImage);

for k=1:length(fields)
    segment = coordinatesPerImage.(fields{k}){1,8};
    pattern = fullfile("ROIOUTLINES/",[segment{1}  '_*']);
    outlineFile = dir(pattern);
    
    % Check if outlines where drawn already and if figures shall be concatenated
    if isempty(findobj('Type', 'figure', 'Name', segment{1})) & concatFigures %True if no figure with this name exists
        % Draw outlines
        figTitle = segment{1};
        fig = figure('Name', figTitle);
        ax = gca;
        ax.YDir = 'reverse'; % flips figure
        ax.Color = 'white';
        axis off

        for j = 1:length(outlineFile)
            hold on
            outline = readcell(fullfile("Example Analysis/ROIOUTLINES/", outlineFile(j).name), "FileType","text", "Delimiter",",","NumHeaderLines",1);
            outline(end+1,:) = outline(1,:); % Ensures, that the outline is a closed loop
            plot(cell2mat(outline(:,1)), cell2mat(outline(:,2)), "LineStyle","-", "Color", "black", "LineWidth", 1);
            hold off
        end   
    elseif ~concatFigures
        % Create tiled layout if the figures are not to be concatenated
        if isempty(findobj('Type', 'figure', 'Name', 'All Images'))
            layout = figure("Name", 'All Images');
            tiledlayout('flow');
        end
        
        fig = nexttile;
        % Plot outlines in the tile
        hold on
        for j = 1:length(outlineFile)
            outline = readcell(fullfile("ROIOUTLINES/", outlineFile(j).name), "FileType","text", "Delimiter",",","NumHeaderLines",1);
            outline(end+1,:) = outline(1,:); % Ensures, that the outline is a closed loop
            plot(cell2mat(outline(:,1)), cell2mat(outline(:,2)), "LineStyle","-", "Color", "black", "LineWidth", 1);
        end         
        title(fields{k}, "Interpreter","none");
        hold off
        ax = gca;
        ax.YDir = 'reverse'; % flips figure along y axis
        axis off
        
    else, disp("No figure plotted")
        fig = findobj('Type', 'figure', 'Name', segment{1});
    end

    % Get cell coordinates
    coords = coordinatesPerImage.(fields{k}){:,5:6};
    colors = getColorArray(coordinatesPerImage.(fields{k}){:,4});
    
    if ~plotExcluded
        coords(coordinatesPerImage.(fields{k}){:,4} == 0, :) = [];
        colors(coordinatesPerImage.(fields{k}){:,4} == 0, :) = [];
    end

    % Plot cells
    if concatFigures
        figure(fig);
    else
        axes = fig;
    end
    hold on
    plt = scatter(coords(:,1), coords(:,2), 20, colors, "filled", 'LineWidth', 1);
    hold off
end